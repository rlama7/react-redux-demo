{"ast":null,"code":"var _jsxFileName = \"/Users/rlama/Documents/project/react-redux-demo/context-api/src/App.js\",\n    _s = $RefreshSig$();\n\n/**\n * context-api use to solve props drilling\n *\n * the goal here is to render animal list set in the parent App Component\n *\n * First the animal list is passed down from App Component to Child Component as props\n * Next the Child component receives the animal list in the form of props and\n * further passes down to the Grandchild.\n *\n * Finally, the grandchild maps through the list and renders it.\n * In this case, the props travel from parent App Component --> Child Component --> Grandchild Component\n * because we can pass the props only at a one level deeper that is from parent component\n * to child component and NOT from the parent to the grandchild commponent.\n *\n * This is what is known as props drilling which context api tries to solve.\n *\n * We'll make use of useContext hook to avoid app drilling and avoid having to pass\n * props from Child Component altogether. In words we can directly pass the props\n * from the parent App Component to the Child Component.\n *\n */\nimport React, { useState, useContext } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Context = /*#__PURE__*/React.createContext();\n\nfunction Child(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(GrandChild, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Child;\n\nfunction GrandChild(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: value.map(el => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: el\n        }, el, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = GrandChild;\n\nfunction App() {\n  _s();\n\n  const [state, setState] = useState(['ant', 'bat', 'cat']);\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Child, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"6N5kMXQXM368xPsGXfroxLydpBI=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Child\");\n$RefreshReg$(_c2, \"GrandChild\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Users/rlama/Documents/project/react-redux-demo/context-api/src/App.js"],"names":["React","useState","useContext","Context","createContext","Child","props","GrandChild","value","map","el","App","state","setState"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AAEA,OAAO,WAAP;;AAEA,MAAMC,OAAO,gBAAGH,KAAK,CAACI,aAAN,EAAhB;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACpB,sBACE;AAAA,2BACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;KANQD,K;;AAQT,SAASE,UAAT,CAAoBD,KAApB,EAA2B;AACzB,sBACE;AAAA,2BACE;AAAA,gBACGE,KAAK,CAACC,GAAN,CAAWC,EAAD,IAAQ;AACjB,4BAAO;AAAA,oBAAcA;AAAd,WAASA,EAAT;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OAFA;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;MAVQH,U;;AAYT,SAASI,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAAD,CAAlC;AAEA,sBACE,QAAC,OAAD,CAAS,QAAT;AAAkB,IAAA,KAAK,EAAEW,KAAzB;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GAVQD,G;;MAAAA,G;AAYT,eAAeA,GAAf","sourcesContent":["/**\n * context-api use to solve props drilling\n *\n * the goal here is to render animal list set in the parent App Component\n *\n * First the animal list is passed down from App Component to Child Component as props\n * Next the Child component receives the animal list in the form of props and\n * further passes down to the Grandchild.\n *\n * Finally, the grandchild maps through the list and renders it.\n * In this case, the props travel from parent App Component --> Child Component --> Grandchild Component\n * because we can pass the props only at a one level deeper that is from parent component\n * to child component and NOT from the parent to the grandchild commponent.\n *\n * This is what is known as props drilling which context api tries to solve.\n *\n * We'll make use of useContext hook to avoid app drilling and avoid having to pass\n * props from Child Component altogether. In words we can directly pass the props\n * from the parent App Component to the Child Component.\n *\n */\nimport React, { useState, useContext } from 'react';\n\nimport './App.css';\n\nconst Context = React.createContext();\n\nfunction Child(props) {\n  return (\n    <div>\n      <GrandChild />\n    </div>\n  );\n}\n\nfunction GrandChild(props) {\n  return (\n    <div>\n      <ul>\n        {value.map((el) => {\n          return <li key={el}>{el}</li>;\n        })}\n      </ul>\n    </div>\n  );\n}\n\nfunction App() {\n  const [state, setState] = useState(['ant', 'bat', 'cat']);\n\n  return (\n    <Context.Provider value={state}>\n      <div className=\"App\">\n        <Child />\n      </div>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}