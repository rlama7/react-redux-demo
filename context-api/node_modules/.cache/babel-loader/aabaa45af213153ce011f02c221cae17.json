{"ast":null,"code":"var _jsxFileName = \"/Users/rlama/Documents/project/react-redux-demo/context-api/src/App.js\",\n    _s = $RefreshSig$();\n\n/**\n * context-api use to solve props drilling\n *\n * the goal here is to render animal list set in the parent App Component\n *\n * First the animal list is passed down from App Component to Child Component as props\n * Next the Child component receives the animal list in the form of props and\n * further passes down to the Grandchild.\n *\n * Finally, the grandchild maps through the list and renders it.\n * In this case, the props travel from parent App Component --> Child Component --> Grandchild Component\n * because we can pass the props only at a one level deeper that is from parent component\n * to child component and NOT from the parent to the grandchild commponent.\n *\n * This is what is known as props drilling which context api tries to solve.\n *\n * We'll make use of useContext hook to avoid app drilling and avoid having to pass\n * props from Child Component altogether. In words we can directly pass the props\n * from the parent App Component to the Child Component.\n *\n */\nimport React, { useState } from 'react';\nimport Child from './components/Child';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [state, setState] = useState(['ant', 'bat', 'cat']);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Child, {\n      value: state\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"6N5kMXQXM368xPsGXfroxLydpBI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/rlama/Documents/project/react-redux-demo/context-api/src/App.js"],"names":["React","useState","Child","App","state","setState"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAAD,CAAlC;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE,QAAC,KAAD;AAAO,MAAA,KAAK,EAAEG;AAAd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAPQD,G;;KAAAA,G;AAST,eAAeA,GAAf","sourcesContent":["/**\n * context-api use to solve props drilling\n *\n * the goal here is to render animal list set in the parent App Component\n *\n * First the animal list is passed down from App Component to Child Component as props\n * Next the Child component receives the animal list in the form of props and\n * further passes down to the Grandchild.\n *\n * Finally, the grandchild maps through the list and renders it.\n * In this case, the props travel from parent App Component --> Child Component --> Grandchild Component\n * because we can pass the props only at a one level deeper that is from parent component\n * to child component and NOT from the parent to the grandchild commponent.\n *\n * This is what is known as props drilling which context api tries to solve.\n *\n * We'll make use of useContext hook to avoid app drilling and avoid having to pass\n * props from Child Component altogether. In words we can directly pass the props\n * from the parent App Component to the Child Component.\n *\n */\nimport React, { useState } from 'react';\nimport Child from './components/Child';\nimport './App.css';\n\nfunction App() {\n  const [state, setState] = useState(['ant', 'bat', 'cat']);\n  return (\n    <div className=\"App\">\n      <Child value={state} />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}